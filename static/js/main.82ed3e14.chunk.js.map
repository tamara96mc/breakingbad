{"version":3,"sources":["components/Frase.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorFrase","styled","div","Frase","frase","quote","author","Contenedor","Boton","button","App","useState","guardarFrase","consultarAPI","a","async","fetch","api","json","useEffect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0gCAIA,IAAMA,EAAkBC,IAAOC,IAAV,KA6CNC,EAVD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEZ,OACI,kBAACJ,EAAD,KACI,4BAAKI,EAAMC,MAAX,KACA,gCAAMD,EAAME,OAAZ,O,smBCxCZ,IAAMC,EAAaN,IAAOC,IAAV,KAOVM,EAAQP,IAAOQ,OAAV,KAkDIC,MAjCf,WAAe,MAGiBC,mBAAS,IAH1B,mBAGNP,EAHM,KAGCQ,EAHD,KAMPC,EAAe,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACDE,MAAM,wDADL,cACbC,EADa,kBAAAH,EAAA,MAECG,EAAIC,QAFL,OAEbd,EAFa,OAGnBQ,EAAaR,EAAM,IAHA,sCAYrB,OAJAe,qBAAW,WACTN,MACC,IAGD,kBAACN,EAAD,KACE,kBAAC,EAAD,CACEH,MAAOA,IAGT,kBAACI,EAAD,CACEY,QAASP,GADX,mBCxCcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.82ed3e14.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst ContenedorFrase = styled.div`\r\n    padding: 3rem;\r\n    border-radius: .5rem;\r\n    background-color: #fff;\r\n    max-width:800px;\r\n    \r\n    @media (min-width: 992px) {\r\n        margin-top: 10rem;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Arial, Helvetica, sans-serif;\r\n        text-align: center;\r\n        position: relative;\r\n        padding-left: 4rem;\r\n\r\n        &::before {\r\n            content: open-quote;\r\n            font-size: 10rem;\r\n            color: black;\r\n            position: absolute;\r\n            left: -1rem;\r\n            top: -2rem;\r\n        }\r\n    }\r\n    p {\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n        font-size: 1.4rem;\r\n        font-weight:bold;\r\n        text-align: right;\r\n        color: #666;\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\nconst Frase = ({frase}) => {\r\n\r\n    return ( \r\n        <ContenedorFrase>\r\n            <h1>{frase.quote} </h1>\r\n            <p>- {frase.author} </p>\r\n        </ContenedorFrase>\r\n     );\r\n}\r\n \r\nexport default Frase;","import React, { useState, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Frase from './components/Frase';\r\n\r\nconst Contenedor = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 5rem;\r\n  flex-direction: column;\r\n` ;\r\n\r\nconst Boton = styled.button`\r\n  background: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\r\n  background-size: 300px;\r\n  font-family:  Arial, Helvetica, sans-serif;\r\n  color: #fff;\r\n  margin-top: 3rem;\r\n  padding: 1rem 3rem;\r\n  font-size: 2rem;\r\n  border: 2px solid black;\r\n  transition: background-size .8s ease;\r\n\r\n  :hover {\r\n    cursor:pointer;\r\n    background-size: 400px;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n\r\n  // state de frases\r\n  const [frase, guardarFrase] = useState({});\r\n\r\n\r\n  const consultarAPI = async () => {\r\n    const api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\r\n    const frase = await api.json()\r\n    guardarFrase(frase[0]);\r\n  }\r\n\r\n\r\n  // Cargar una frase\r\n  useEffect( () => {\r\n    consultarAPI()\r\n  }, []);\r\n\r\n  return (\r\n    <Contenedor>\r\n      <Frase\r\n        frase={frase}\r\n      />\r\n\r\n      <Boton\r\n        onClick={consultarAPI}\r\n      >\r\n        Obtener Frase\r\n      </Boton>\r\n    </Contenedor>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}